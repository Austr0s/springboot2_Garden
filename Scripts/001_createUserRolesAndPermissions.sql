-- DROP TABLES AND SEQUENCES BEFORE START DATABASE:
USE gardendb;

DROP SEQUENCE IF EXISTS SEQ_PERMISSION;
DROP SEQUENCE IF EXISTS SEQ_USER;
DROP SEQUENCE IF EXISTS SEQ_ROLE;

DROP TABLE IF EXISTS ROLE_PERMISSION;
DROP TABLE IF EXISTS USER_ROLE;
DROP TABLE IF EXISTS USER;
DROP TABLE IF EXISTS `ROLE`;
DROP TABLE IF EXISTS PERMISSION;

-- ROLES: 
CREATE SEQUENCE IF NOT EXISTS SEQ_ROLE MINVALUE 1 START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS `ROLE` (
	ID INT(19) NOT NULL DEFAULT NEXT VALUE FOR SEQ_ROLE COMMENT 'Entity ID, Primary Key',
	CODE VARCHAR(50) NOT NULL COMMENT 'Role Code to grant',
	DESCRIPTION VARCHAR(250) COMMENT 'Role Description about what this role grant on user profile',
	
	CONSTRAINT PK_ROLE PRIMARY KEY (ID)
) COMMENT='Role detail for access permissions';

INSERT INTO `ROLE`(CODE,DESCRIPTION) VALUES('ADMINISTRATION_ROLE_ACCESS','This role grant all resources of application.');
INSERT INTO `ROLE`(CODE,DESCRIPTION) VALUES('USER_ROLE_ACCESS','This role grant only User resources access. Just limited acctions.');
INSERT INTO `ROLE`(CODE,DESCRIPTION) VALUES('GUEST_ROLE_ACCESS','This role grant only Guest resources access. Just see some resources.');
COMMIT;

-- ROLES: 
CREATE SEQUENCE IF NOT EXISTS SEQ_PERMISSION MINVALUE 1 START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS PERMISSION (
	ID INT(19) NOT NULL DEFAULT NEXT VALUE FOR SEQ_PERMISSION COMMENT 'Entity ID, Primary Key',
	CODE VARCHAR(50) COMMENT 'Role Code to grant',
	DESCRIPTION VARCHAR(250) COMMENT 'AccessGrant Description about what role can do on application',
	
	CONSTRAINT PK_ACCESS_GRANT PRIMARY KEY (ID)
) COMMENT='Role detail for access permissions';

INSERT INTO PERMISSION(CODE,DESCRIPTION) VALUES('WRITE_ACCESS','This permission grant write application resources.');
INSERT INTO PERMISSION(CODE,DESCRIPTION) VALUES('READ_ACCESS','This permission grant read application resources.');
INSERT INTO PERMISSION(CODE,DESCRIPTION) VALUES('UPDATE_ACCESS','permission grant delete application resources.');
INSERT INTO PERMISSION(CODE,DESCRIPTION) VALUES('DELETE_ACCESS','permission grant delete application resources.');

COMMIT;


-- ROLE_PERMISSION TABLE RELATIONSHIP
CREATE TABLE IF NOT EXISTS ROLE_PERMISSION (
	ROLE_ID INT(19) NOT NULL COMMENT 'Reference to Role Primary Key',
	GRANT_ID INT(19) NOT NULL COMMENT 'Reference to AccessGrant Primary Key',
	
	CONSTRAINT FK_ROLE_ACCESS FOREIGN KEY (ROLE_ID) REFERENCES `ROLE`(ID),
	CONSTRAINT FK_ACCESS_GRANT_ACCESS FOREIGN KEY (GRANT_ID) REFERENCES PERMISSION(ID),
	CONSTRAINT PK_ROLE_ACCESS_GRANT PRIMARY KEY (ROLE_ID, GRANT_ID)
) COMMENT='Table relationship to User and Role';

INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'WRITE_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'ADMINISTRATION_ROLE_ACCESS'));
INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'READ_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'ADMINISTRATION_ROLE_ACCESS'));
INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'UPDATE_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'ADMINISTRATION_ROLE_ACCESS'));
INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'DELETE_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'ADMINISTRATION_ROLE_ACCESS'));

INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'WRITE_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'USER_ROLE_ACCESS'));
INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'READ_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'USER_ROLE_ACCESS'));
INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'UPDATE_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'USER_ROLE_ACCESS'));

INSERT INTO ROLE_PERMISSION(GRANT_ID,ROLE_ID) VALUES((SELECT ID FROM PERMISSION WHERE CODE = 'READ_ACCESS'), (SELECT ID FROM `ROLE` WHERE CODE = 'GUEST_ROLE_ACCESS'));

COMMIT;

-- USERS:
CREATE SEQUENCE IF NOT EXISTS SEQ_USER MINVALUE 1 START WITH 1 INCREMENT BY 1;
CREATE TABLE IF NOT EXISTS `USER` (
	ID INT(19) NOT NULL DEFAULT NEXT VALUE FOR SEQ_USER COMMENT 'Entity ID, Primary Key',
	USERNAME VARCHAR(50) NOT NULL COMMENT 'Username to login',
	PASSWORD VARCHAR(50) NOT NULL COMMENT 'Password to login',
	ACTIVE VARCHAR(1) NOT NULL DEFAULT('1') COMMENT 'State of user, default 1 (Active)',
	
	CONSTRAINT PK_USER PRIMARY KEY (ID)
) COMMENT='User details for login on application';

INSERT INTO `USER` (USERNAME,PASSWORD,ACTIVE) VALUES('admin','test','1');
INSERT INTO `USER` (USERNAME,PASSWORD,ACTIVE) VALUES('user','userpass','1');
INSERT INTO `USER` (USERNAME,PASSWORD,ACTIVE) VALUES('guest','guestpass','1');


COMMIT;

-- USER_ROLE_RELATIONSHIP
CREATE TABLE IF NOT EXISTS USER_ROLE (
	USER_ID INT(19) NOT NULL,
	ROLE_ID INT(19) NOT NULL,
	
	CONSTRAINT FK_ROLE_USER_ROLE FOREIGN KEY (ROLE_ID) REFERENCES `ROLE`(ID),
	CONSTRAINT FK_USER_USER_ROLE FOREIGN KEY (USER_ID) REFERENCES `USER`(ID)
) COMMENT='User-Role relationship table';

INSERT INTO USER_ROLE (USER_ID,ROLE_ID) VALUES((SELECT ID FROM `USER` WHERE USERNAME = 'admin'),(SELECT ID FROM `ROLE` WHERE CODE = 'ADMINISTRATION_ROLE_ACCESS'));
INSERT INTO USER_ROLE (USER_ID,ROLE_ID) VALUES((SELECT ID FROM `USER` WHERE USERNAME = 'user'),(SELECT ID FROM `ROLE` WHERE CODE = 'USER_ROLE_ACCESS'));
INSERT INTO USER_ROLE (USER_ID,ROLE_ID) VALUES((SELECT ID FROM `USER` WHERE USERNAME = 'user'),(SELECT ID FROM `ROLE` WHERE CODE = 'ADMINISTRATION_ROLE_ACCESS'));

COMMIT;

-- QUERY TO SEE DATA INSERTED ON TABLES:
SELECT U.USERNAME, U.ACTIVE, R.CODE, AG.CODE FROM `USER` U
INNER JOIN USER_ROLE UR ON UR.USER_ID = U.ID
INNER JOIN `ROLE` R ON UR.ROLE_ID = R.ID
INNER JOIN ROLE_PERMISSION RAG ON R.ID = RAG.ROLE_ID
INNER JOIN PERMISSION AG ON RAG.GRANT_ID = AG.ID;





